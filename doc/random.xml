<!--

  random.xml            ramega package documentation          Zsolt Adam Balogh
																	Vasyl Laver

  Copyright (C) 2018  Zsolt Adam Balogh, Vasyl Laver, Department of Mathematical Sciences,
  UAEU, Al Ain, United Arab Emirates
  This file is free software, see license information at the end.

  This chapter contains the operations with logic functions
-->

<Chapter Label="random">
<Heading>Random Methods</Heading>

<Section Label="random_basic">
<Heading>Basic Operations</Heading>


<ManSection>
<Func Name="BasicGroup" Arg="KG"/>
<Description>
<!-- The names chosen for the arguments describe their meaning.-->

For the group ring <C>KG</C> the function <C>BasicGroup</C> returns the basic group of <C>KG</C> as a subgroup of the normalized group of units.

<Example>
<![CDATA[
gap> G:=CyclicGroup(IsFpGroup,4);
<fp group of size 4 on the generators [ a ]>
gap> Elements(G);
[ <identity ...>, a, a^2, a^3 ]
gap> KG:=GroupRing(GF(2),G);
<algebra-with-one over GF(2), with 1 generators>
gap> BasicGroup(KG);
<group with 4 generators>
gap> Elements(last);
[ (Z(2)^0)*<identity ...>, (Z(2)^0)*a, (Z(2)^0)*a^2, (Z(2)^0)*a^3 ]
]]>
</Example>
</Description> </ManSection>

<ManSection>
<Func Name="IsLienEngel" Arg="KG"/>
<Description>
<!-- The names chosen for the arguments describe their meaning.-->

On any associative ring <M>R</M> the Lie bracket is defined as <M>[x,y] = xy-yx.</M>. For any positive integer <M>n</M>,
a subset <M>\Lambda</M> of <M>R</M> is said to be Lie <M>n</M>-Engel if for any <M>x,y \in \Lambda</M>,
<M>[x,y,\ldots,y]=0</M> (<M>y</M> is taken <M>n</M> times)  <Cite Key="Lee2000"/> .<P/>

For the group ring <C>KG</C> the function <C>IsLienEngel</C> returns <C>true</C> if <C>KG</C> is Lie <M>n</M>-Engel and <C>false</C> otherwise.

<Example>
<![CDATA[
gap> G:=CyclicGroup(4);
<pc group of size 4 with 2 generators>
gap> KG:=GroupRing(GF(2),G);
<algebra-with-one over GF(2), with 2 generators>
gap> IsLienEngel(KG);
false
gap> G:=DihedralGroup(16);
<pc group of size 16 with 4 generators>
gap> KG:=GroupRing(GF(2),G);
<algebra-with-one over GF(2), with 4 generators>
gap> IsLienEngel(KG);
true
]]>
</Example>
</Description> </ManSection>
</Section>

<Section Label="random_methods_elements">
<Heading>Random Methods for Obtaining Elements With Desired Properties</Heading>

<ManSection>
<Func Name="GetRandomUnit" Arg="KG"/>
<Description>
<!-- The names chosen for the arguments describe their meaning.-->
For the group ring <C>KG</C> the function <C>GetRandomUnit</C> returns an unit
(i.e. an invertible element) by a random way.

<Example>
<![CDATA[
gap> G:=CyclicGroup(4);
<pc group of size 4 with 2 generators>
gap> KG:=GroupRing(GF(7),G);
<algebra-with-one over GF(7), with 2 generators>
gap> u:=GetRandomUnit(KG);;
gap> Augmentation(u);
Z(7)^4
gap> u*u^-1;
(Z(7)^0)*<identity> of ...
]]>
</Example>
</Description> </ManSection>

<ManSection>
<Func Name="GetRandomNormalizedUnit" Arg="KG"/>
<Description>
<!-- The names chosen for the arguments describe their meaning.-->
Let <M>U(KG)</M> be the multiplicative group of the group algebra <M>KG</M> of the the <M>p</M>-group <M>G</M>
over a field <M>K</M> of characteristic <M>p</M>. The subgroup
<Display>
V(KG)=\{ \sum_{g \in G} \alpha_g g \in U(KG) \mid \sum_{g \in G} \alpha_g = 1 \}
</Display>
is called the group of normalized units of the group algebra <M>KG</M> <Cite Key="Bovdi_Szakacs_I"/>. <P/>

For the group ring <C>KG</C> the function <C>GetRandomNormalizedUnit</C> returns a normalized unit
(i.e. an invertible element with augmentation 1, <M>u \in V(KG)</M>) by a random way.

<Example>
<![CDATA[
gap> G:=DihedralGroup(IsFpGroup,16);;
gap> KG:=GroupRing(GF(2),G);;
gap> u:=GetRandomNormalizedUnit(KG);;
gap> Augmentation(u);
Z(2)^0
gap> u*u^-1;
(Z(2)^0)*<identity ...>
]]>
</Example>
</Description> </ManSection>

<ManSection>
<Func Name="GetRandomNormalizedUnitaryUnit" Arg="KG"/>
<Description>
<!-- The names chosen for the arguments describe their meaning.-->
Let <M>p</M> be a prime, <M>K</M> the field of characteristic <M>p</M>, <M>G</M> a finite abelian <M>p</M>-group
with an arbitrary automorphism <M>\eta</M> of order 2 and <M>G_{\eta}=\{g \in G \mid \eta(g)=g\}</M>. Extending
the automorphism <M>\eta</M> to the group algebra <M>KG</M> we obtain the involution
<Display>
  x = \sum_{g \in G} \alpha_g g \mapsto x^{*}= \sum_{g \in G} \alpha_g \eta(g)
</Display>
of KG which we call as <M>\eta</M>-canonical involution. If <M>\eta(g)=g^{-1}</M> for all <M>g \in G</M> then this
involution is called canonical. Then, if <M>V(KG)</M> is the group of normalized units of <M>KG</M>, the subgroup
of unitary units is defined as <Cite Key="BovdiSzakacs2006"/>
<Display>
V_*(KG)=\{x \in V(FG) \mid x^* = x^{-1} \}.
</Display>



<P/> For the group algebra <C>KG</C> the function <C>GetRandomNormalizedUnitaryUnit</C> returns a normalized unitary unit
(i.e. such an invertible element with augmentation 1, that <M>u\cdot u^{*}=1</M>) by a random way. Also, there
exists a two-parametrical version of this method, where the second parameter <M>\eta</M> is an arbitrary antiautomorphism of <M>G</M>.

<Example>
<![CDATA[
gap> G:=CyclicGroup(4);;
gap> KG:=GroupRing(GF(2),G);;
gap> u:=GetRandomNormalizedUnitaryUnit(KG);;
gap> u*Involution(u);
(Z(2)^0)*<identity> of ...
gap> Augmentation(u);
Z(2)^0
]]>
</Example>
</Description> </ManSection>

<ManSection>
<Func Name="GetRandomCentralNormalizedUnit" Arg="KG"/>
<Description>
<!-- The names chosen for the arguments describe their meaning.-->
For the group ring <C>KG</C> the function <C>GetRandomCentralNormalizedUnit</C> returns a central normalized unit
(i.e. such an invertible element with augmentation 1, that <M>u\cdot x=x \cdot u</M>, <M>\forall x \in KG</M>) by a random way.

<Example>
<![CDATA[
gap> G:=CyclicGroup(IsFpGroup,4);;
gap> KG:=GroupRing(GF(2),G);;
gap> u:=GetRandomCentralNormalizedUnit(KG);;
gap> Augmentation(u);
Z(2)^0
gap> bool:=true;
true
gap> for x in Elements(KG) do
> if x*u<>u*x then bool:=false; break; fi;
> od;
gap> bool;
true
]]>
</Example>
</Description> </ManSection>


<ManSection>
<Func Name="GetRandomElementFromAugmentationIdeal" Arg="KG"/>
<Description>
<!-- The names chosen for the arguments describe their meaning.-->
If <M>KG</M> is a group ring then its augmentation ideal <M>A</M> is generated by all elements of the form
<M>g-1</M> where <M>g \in G \setminus \{1 \}</M>. The augmentation ideal consists of all elements with augmentation 0,
i.e.
<Display>
A(KG)=\{ \sum_{g \in G} \alpha_g g \in KG \mid \sum_{g \in G} \alpha_g = 0 \}.
</Display>
<P/>
For the group ring <C>KG</C> the function <C>GetRandomElementFromAugmentationIdeal</C> returns an element
from the augmentation ideal of <M>KG</M> by a random way.

<Example>
<![CDATA[
gap> G:=QuaternionGroup(16);
<pc group of size 16 with 4 generators>
gap> KG:=GroupRing(GF(2),G);
<algebra-with-one over GF(2), with 4 generators>
gap> u:=GetRandomElementFromAugmentationIdeal(KG);;
gap> Augmentation(u);
0*Z(2)
]]>
</Example>
</Description> </ManSection>
</Section>
<Section Label="random_methods_general">
<Heading>Random Methods for Group Rings</Heading>

<ManSection>
<Func Name="RandomLienEngelLength" Arg="KG, num"/>
<Description>
<!-- The names chosen for the arguments describe their meaning.-->
Let <C>KG</C> be a group ring and let <M>[x,y,y,\ldots,y]=0</M> for all <M>x, y \in KG </M>. Then the number of <M>y</M>'s in the last equation is called the Lie <M>n</M>-Engel length. <P/>
For the group ring <C>KG</C> and the maximal number of iterations <C>num</C> the function <C>RandomLienEngelLength</C> returns the Lie <M>n</M>-Engel length of <M>KG</M> by a random way.

<Example>
<![CDATA[
gap> G:=DihedralGroup(16);;
gap> KG:=GroupRing(GF(2),G);;
gap> RandomLienEngelLength(KG,100);
4
]]>
</Example>
</Description> </ManSection>

<ManSection>
<Func Name="RandomExponent" Arg="KG, num"/>
<Description>
<!-- The names chosen for the arguments describe their meaning.-->
For the group ring <C>KG</C> and the maximal number of iterations <C>num</C> the function <C>RandomExponent</C> returns the
exponent of <C>KG</C> by a random way.

<Example>
<![CDATA[
gap> G:=DihedralGroup(16);;
gap> KG:=GroupRing(GF(2),G);;
gap> RandomExponent(KG,100);
8
]]>
</Example>
</Description> </ManSection>

<ManSection>
<Func Name="RandomExponentOfNormalizedUnitsCenter" Arg="KG, num"/>
<Description>
<!-- The names chosen for the arguments describe their meaning.-->
For the group ring <C>KG</C> and the maximal number of iterations <C>num</C> the function <C>RandomExponentOfNormalizedUnitsCenter</C> returns the
exponent of the center of the group of normalized units of <C>KG</C> by a random way.

<Example>
<![CDATA[
gap> G:=DihedralGroup(16);;
gap> KG:=GroupRing(GF(2),G);;
gap> RandomExponentOfNormalizedUnitsCenter(KG,100);
4
]]>
</Example>
</Description> </ManSection>

<ManSection>
<Func Name="RandomNilpotencyClass" Arg="KG, num"/>
<Description>
<!-- The names chosen for the arguments describe their meaning.-->
Let <M>G</M> be a group and let <M>g_1,\ldots,g_n \in G </M>. By the symbol <M>(g_1,\ldots,g_n)</M> we denote the
commutator of the elements <M>g_1,\ldots,g_n</M> which is defined inductively as
<Display>
(g_1,\ldots,g_n)=((g_1,\ldots,g_{n-1}),g_n), \quad (g_1,g_2)=g_1^{-1}g_2^{-1}g_1 g_2.
</Display>
As usual, for the subsets <M>X, Y</M> of G by the commutator <M>(X,Y)</M> we mean the subgroup generated by all
commutators <M>(x,y)</M> with <M>x \in X</M>, <M>y \in Y</M>. <P/>
This allows us to define the lower central series of a nonempty subset <M>H</M> of <M>G</M>: let
<M>\gamma_{n+1}(H)=(\gamma_{n}(H),H)</M> with <M>\gamma_1(H)=H</M>. We say that <M>H</M> is nilpotent if
<M>\gamma_{n}(H)=1</M> for some <M>n</M>. For a nilpotent subset <M>H \subseteq G</M> the number
<Display>
  cl(H) = \min\{n \in \mathbb{N}_0: \gamma_{n+1}(H)=1\}
</Display>
is called the nilpotency class of H <Cite Key="BaloghJuhasz2011"/>.
<P/>For the group ring <C>KG</C> and the maximal number of iterations <C>num</C> the function <C>RandomNilpotencyClass</C> returns the
nilpotency class of the group of normalized units of <C>KG</C> by a random way.

<Example>
<![CDATA[
gap> G:=DihedralGroup(16);;
gap> KG:=GroupRing(GF(2),G);;
gap> RandomNilpotencyClass(KG,100);
4
]]>
</Example>
</Description> </ManSection>



<ManSection>
<Func Name="RandomDerivedLength" Arg="KG, n"/>
<Description>
<M>KG</M> is called <A>Lie solvable</A>, if some of the terms of the Lie derived series <M>\delta^{[n]}(KG)=[\delta^{[n-1]}(KG),\delta^{[n-1]}(KG)]</M>
with <M>\delta^{[0]}(KG)=KG</M> are equal to zero. <P/>
Denote by <M>\dl_L(KG)</M> the minimal element of the set <M>\{m\in\mathbb N\;\vert\;
\delta^{[m]}(KG)=0\}</M>, which is said to be the <A>Lie derived length</A> of <M>KG</M>. <P/>


For the group ring <C>KG</C> and a positive integer  <C>n</C> the function <C>RandomDerivedLength</C> returns the Lie derived length by a random way.

<Example>
<![CDATA[
gap> D:=DihedralGroup(IsFpGroup,8);;
gap> KG:=GroupRing(GF(2),D);;
gap> RandomDerivedLength(KG,100);
2
]]>
</Example>
</Description> </ManSection>

<ManSection>
<Func Name="RandomCommutatorSubgroup" Arg="KG, n"/>
<Description>
For the group ring <C>KG</C> and a positive integer  <C>n</C> the function <C>RandomCommutatorSubgroup</C> returns the commutator subgroup by a random way.

<Example>
<![CDATA[
gap> G:=DihedralGroup(IsFpGroup,8);;
gap> KG:=GroupRing(GF(2),G);;
gap> SG:=RandomCommutatorSubgroup(KG,100);
gap> StructureDescription(SG);
"C2 x C2 x C2"
gap> G:=CyclicGroup(8);;
gap> KG:=GroupRing(GF(3),G);;
gap> SG:=RandomCommutatorSubgroup(KG,100);;
gap> Elements(SG);
[ (Z(3)^0)*<identity> of ... ]
]]>
</Example>
</Description> </ManSection>


<ManSection>
<Func Name="RandomCommutatorSubgroupOfNormalizedUnits" Arg="KG, n"/>
<Description>
For the group ring <C>KG</C> and a positive integer  <C>n</C> the function <C>RandomCommutatorSubgroupOfNormalizedUnits</C>
returns the commutator subgroup of normalized units by a random way.

<Example>
<![CDATA[
gap> G:=DihedralGroup(8);;
gap> KG:=GroupRing(GF(3),G);;
gap> SG:=RandomCommutatorSubgroup(KG,100);;
gap> u:=Random(Elements(SG));;
gap> Augmentation(u);
Z(3)^0
]]>
</Example>
</Description> </ManSection>

<ManSection>
<Func Name="RandomCenterOfCommutatorSubgroup" Arg="KG, n"/>
<Description>
For the group ring <C>KG</C> and a positive integer  <C>n</C> the function <C>RandomCenterOfCommutatorSubgroup</C>
returns the center of the commutator subgroup by a random way.

<Example>
<![CDATA[
gap> G:=DihedralGroup(8);;
gap> KG:=GroupRing(GF(3),G);;
gap> SG:=RandomCenterOfCommutatorSubgroup(KG,100);;
gap> x1:=Random(Elements(SG));; x2:=Random(Elements(SG));;
gap> x1*x2=x2*x1;
true
]]>
</Example>
</Description> </ManSection>

<ManSection>
<Func Name="RandomNormalizedUnitGroup" Arg="KG, n"/>
<Description>
For the group ring <C>KG</C> and a positive integer  <C>n</C> the function <C>RandomNormalizedUnitGroup</C>
returns the normalized unit group by a random way.

<Example>
<![CDATA[
gap> G:=DihedralGroup(8);;
gap> KG:=GroupRing(GF(2),G);;
gap> SG:=RandomNormalizedUnitGroup(KG);
<group with 4 generators>
gap> Size(SG);
128
gap> u:=Random(Elements(SG));;
gap> Augmentation(u);
Z(2)^0
]]>
</Example>
</Description> </ManSection>


<ManSection>
<Func Name="RandomUnitarySubgroup" Arg="KG, n"/>
<Description>
For the group ring <C>KG</C> and a positive integer  <C>n</C> the function <C>RandomUnitarySubgroup</C>
returns the unitary subgroup (see  <Ref Func="GetRandomNormalizedUnitaryUnit" />) by a random way.

<Example>
<![CDATA[
gap> G:=DihedralGroup(8);;
gap> KG:=GroupRing(GF(3),G);;
gap> SG:=RandomUnitarySubgroup(KG,100);;
gap> u:=Random(Elements(SG));;
gap> Augmentation(u);
Z(3)^0
gap> u*u^-1;
(Z(3)^0)*<identity> of ...
]]>
</Example>
</Description> </ManSection>


<ManSection>
<Func Name="RandomCommutatorSeries" Arg="KG, n"/>
<Description>
For the group ring <C>KG</C> and a positive integer  <C>n</C> the function <C>RandomCommutatorSeries</C>
returns the commutator series by a random way.

<Example>
<![CDATA[
gap> G:=DihedralGroup(8);;
gap> KG:=GroupRing(GF(2),G);;
gap> CS:=RandomCommutatorSeries(KG,100);
[ <group of size 128 with 4 generators>, <group of size 8 with 8 generators>,
  <group of size 1 with 1 generators> ]
]]>
</Example>
</Description> </ManSection>

<ManSection>
<Func Name="RandomLowerCentralSeries" Arg="KG, n"/>
<Description>
The lower central series of a group <M>G</M> is the descending series of groups
<Display>
G=G_1 \trianglerighteq G_2 \trianglerighteq \ldots \trianglerighteq G_n \trianglerighteq \ldots,
</Display>
where each <M>G_{n+1}=[G_n,G]</M>, the subgroup generated by all commutators <M>[x,y]</M> with <M>x</M> in <M>G_n</M>
and <M>y</M> in <M>G</M>. Thus, <M>G_2=[G,G]=G^{(1)}</M>, the derived subgroup of <M>G</M>; <M>G_3=[[G,G],G]</M>, etc.
The lower central series is often denoted <M>y_n(G)=G_n</M>.
<P/>For the group ring <C>KG</C> and a positive integer  <C>n</C> the function <C>RandomLowerCentralSeries</C>
returns the lower central series by a random way.

<Example>
<![CDATA[
gap> G:=DihedralGroup(8);;
gap> KG:=GroupRing(GF(2),G);;
gap> CS:=RandomLowerCentralSeries(KG,100);
[ <group of size 128 with 4 generators>, <group of size 8 with 8 generators>,
  <group of size 1 with 1 generators> ]
]]>
</Example>
</Description> </ManSection>


<ManSection>
<Func Name="RandomUnitaryOrder" Arg="KG, n"/>
<Description>
For the group ring <C>KG</C> and a positive integer  <C>n</C> the function <C>RandomUnitaryOrder</C>
returns the unitary order of <M>KG</M> by a random way. Also, there exists a three-parametrical version of this method,
where the third parameter <M>\sigma</M> is an arbitrary involution.

<Example>
<![CDATA[
gap> G:=DihedralGroup(8);;
gap> KG:=GroupRing(GF(2),G);;
gap> ord:=RandomUnitaryOrder(KG,100);
64
]]>
</Example>
</Description> </ManSection>

<ManSection>
<Func Name="RandomDihedralDepth" Arg="KG, n"/>
<Description>
For the group ring <C>KG</C> and a positive integer  <C>n</C> the function <C>RandomCentralUnitaryOrder</C>
returns the depth of <M>KG</M> by a random way.

<Example>
<![CDATA[
gap> G:=DihedralGroup(16);;
gap> UD:=PcNormalizedUnitGroup(KG);
<pc group of size 32768 with 15 generators>
gap> DihedralDepth(UD);
3
gap> time;
4211
]]>
</Example>
</Description> </ManSection>


<ManSection>
<Func Name="RandomOmega" Arg="KG, m, n"/>
<Description>

For the group ring <C>KG</C> and a positive integers <C>m</C> and <C>n</C> (number of iterations) the function <C>RandomOmega</C>
returns the subgroup of <M>G</M>, that is generated by the elements <M>g</M> for which <M>g^{p^m}=1</M>,
where <M>G</M> is a finite p-group by random search. There is overloaded version of this method for the case when the first argument is a
is a finite p-group.

<Example>
<![CDATA[
gap> G:=CyclicGroup(8);;
gap> KG:=GroupRing(GF(2),G);;
gap> RO:=RandomOmega(KG,2,50);;
gap> u:=Random(Elements(RO));;
gap> (u^2)^2;
(Z(2)^0)*<identity> of ...
gap> ## Let h be a group.
gap> h:=SmallGroup(16,10);;
gap> RO:=RandomOmega(h,2,50);;
gap> u:=Random(Elements(RO));;
gap> (u^2)^2;
<identity> of ...
]]>
</Example>
</Description> </ManSection>

<ManSection>
<Func Name="RandomAgemo" Arg="KG, m, n"/>
<Description>

For the group ring <C>KG</C> and a positive integers <C>m</C> and <C>n</C> (number of iterations) the function <C>RandomOmega</C>
returns the subgroup of <M>G</M>, that is generated by the elements <M>g^{p^m}</M>,
where <M>G</M> is a finite <M>p</M>-group, by random search.

<Example>
<![CDATA[
gap> KG:=GroupRing(GF(2),CyclicGroup(8));;
gap> RA:=RandomAgemo(KG,2,50);
<group with 2 generators>
]]>
</Example>
</Description> </ManSection>

</Section>


</Chapter>

<!--
  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; version 2 of the License.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-->

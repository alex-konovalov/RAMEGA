#############################################################################
#Random Methods in Group Algebras (RAMEGA)

#############################################################################
##
##  LieComm( <x,y> )
##  
##  Returns the Lie commutator [x,y]=xy-yx.
##  
## 
LieComm := function(x,y)
   return x*y-y*x;
end;

#############################################################################
##
##  BasicGroup( <KG> )
##  
##  Returns the basic group of the group algebra KG as a subgroup of the
##  normalized group of units.
## 
BasicGroup := function(kg)
    local emb,g;
    g:=UnderlyingGroup(kg);          
    emb:=Embedding(g,kg);
    return Group(List(g,x->x^emb));
end;

#############################################################################
##
##  IsLienEngel( <KG> )
##  
##  Returns true if KG is Lie n-Engel.
##  [x,y,y,...,y]=0 for all x,y and the number of y's is n. 
##  
## 
IsLienEngel := function(kg)
   local g,ns,er,p,h;
   er:=false;
   p:=Characteristic(kg);
   if IsPrime(p) then
     g:=UnderlyingGroup(kg);
     if not(IsAbelian(g)) and IsNilpotent(g) then
	ns:=NormalSubgroups(g);
	for h in ns do
	  if ( IsPPrimePower(Order(g)/Order(h),p) and IsPGroup(DerivedSubgroup(h))  ) then
        	if PrimePGroup(DerivedSubgroup(h))=p then
			er:=true;
		fi;	
	  fi;
	od;
     fi;
   else er:=true;
   fi;
   return er;
end;
#############################################################################
##
##  RandomLienEngelLength( <KG,n> )
##  
##  Returns the Lie n-Engel length of KG by random way.
##  [x,y,y,...,y]=0 for all x,y and the number of y's is the Lie n-Engel length. 
##  
## 
RandomLienEngelLength := function(kg,m)
   local g,ns,,er,i,j,x,y,max;
   max:=0;
   if (IsLienEngel(kg)) then
     g:=BasicGroup(kg);
     for j in [1..m] do
       x:=Random(kg);
       for i in g do
         y:=i;
         er:=0;
         repeat
           y:=LieComm(y,x);
           er:=er+1;
         until(y=Zero(kg));
		 if (max < er) then 
		   max:=er;
		 fi;
       od;
     od;
   else max:=1;;
   fi;
   return max;
end;

#############################################################################
##
##  GetRandomNormalizedUnit( <KG> )
##  
##  Returns the nilpotency class of V by random way.
##  
## 
GetRandomNormalizedUnit := function(kg)
   local x,e;
   e:=One(UnderlyingField(kg));
   repeat
      x:=Random(kg);
   until(Augmentation(x) = e);
   return x;
end;

#############################################################################
##
##  RandomExponent( <KG,m> )
##  
##  Returns the Exponent of V by random way.
##  
## 
RandomExponent := function(kg,m)
   local order,x,e,er,max;
   er:=0;
   max:=1;
   order:=0;
   e:=One(UnderlyingField(kg));
   repeat
     x:=GetRandomNormalizedUnit(kg);
     order:=Order(x);
     er:=er+1;
	 if (max < order) then
	   max:=order;
	 fi;
   until(er = m);
   return max;
end;

#############################################################################
##
##  RandomExponentOfNormalizedUnitsCenter( <KG,m> )
##  
##  Returns the exponent of the center of normalized units V.
##  
## 
RandomExponentOfNormalizedUnitsCenter := function(kg,m)
   local x,e,er,order;
   er:=0;
   max:=0;
   e:=One(UnderlyingField(kg));
   c:=Center(kg);
   repeat
     x:=Random(c);
     if (Augmentation(x) = e) then
        order:=Order(x);
		if (max < order) then
		  max:=order;
		fi;
        er:=er+1;
     fi;
   until(er = m);
   return max; 
end;

#############################################################################
##
##  RandomNilpotencyClass( <KG,m> )
##  
##  Returns the nilpotency class of V by random way.
##  
## 
RandomNilpotencyClass := function(kg,m)
   local cl,x,y,e,er,class;
   e:=One(kg);
   class:=0;
   er:=1;
   x:=GetRandomNormalizedUnit(kg);
   while (er < m) do
     cl:=0;
     repeat
        y:=GetRandomNormalizedUnit(kg);
        x:=Comm(x,y);
        cl:=cl+1;
     until(x = e);
     if (class < c1) then 
	   class:=c1;
	 fi;
     er:=er+1;
   od;
   return class;
end;

#############################################################################
##
##  GetDerivedDepthN( <KG> )
##  
##  Gives an element with depth n, (x,y) has dept 2, if x,y have depth 1..
##  
## 
GetDerivedDepthN := function(kg,n)
   local e,full,tomb,er,counter,x,c,calc,elem;
   e:=One(kg);
   full:=[];
   tomb:=[];
   er:=0;
   counter:=2^(n-1);
   if (n=1) then
      return GetRandomNormalizedUnit(kg);
   fi;
   while (er < counter) do
     x:=GetRandomNormalizedUnit(kg);
     Add(tomb,x);
     er:=er+1;
   od;
   Add(full,tomb);
   c:=1;
   repeat
      x:=full[c];
      tomb:=[];
      calc:=1;
      while(calc<Number(x)) do
         elem:=Comm(x[calc],x[calc+1]);
         Add(tomb,elem);
         calc:=calc+2;
      od;
      Add(full,tomb);
      c:=c+1;
   until(c=n);
   return tomb[1];
end;
#############################################################################
##
##  RandomDerivedLength( <KG,m> )
##  
##  Returns the nilpotency class of V by random way.
##  
## 
RandomDerivedLength := function(kg,m)
   local e,n,x,depth,bol;
   e:=One(kg);
   bol:=false;
   depth:=1;
   while(not(bol)) do
     n:=1;
     while(n < m) do
        x:=GetDerivedDepthN(kg,depth);
        if (not(x=e)) then
           bol:=true;
        fi;
        n:=n+1;
     od;
     if (bol) then
        depth:=depth+1;
        bol:=false;
     else 
        bol:=true;
     fi;
   od;
   return depth-1;
end;



##  RandomLienEngelLengthOfUnitgroup  (x,y,y,...,y)=1




